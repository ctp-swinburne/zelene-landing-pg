// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum UserRole {
    MEMBER
    ADMIN
    TENANT_ADMIN
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    // customized fields for zelene platform
    role          UserRole  @default(MEMBER)
    username      String?   @unique
    password      String?
    // Joined - developed
    joined        DateTime  @default(now())
    // Additional Information for Profile page
    profile       Profile? // Relation to profile
    social        Social? // Relation to social
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// for queries module

// Enum definitions for various statuses and types
enum QueryStatus {
    NEW
    IN_PROGRESS
    RESOLVED
    CANCELLED
}

enum InquiryType {
    PARTNERSHIP
    SALES
    MEDIA
    GENERAL
}

enum FeedbackCategory {
    UI
    FEATURES
    PERFORMANCE
    DOCUMENTATION
    GENERAL
}

enum IssueType {
    DEVICE
    PLATFORM
    CONNECTIVITY
    SECURITY
    OTHER
}

enum IssueSeverity {
    LOW
    MEDIUM
    HIGH
    CRITICAL
}

enum SupportCategory {
    ACCOUNT
    DEVICES
    PLATFORM
    OTHER
}

enum SupportPriority {
    LOW
    MEDIUM
    HIGH
}

// Contact form model
model ContactQuery {
    id           String      @id @default(cuid())
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    name         String
    organization String
    email        String
    phone        String
    inquiryType  InquiryType
    message      String      @db.Text
    status       QueryStatus @default(NEW)
    response     String?
}

// Feedback form model
model Feedback {
    id             String           @id @default(cuid())
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    category       FeedbackCategory
    satisfaction   Float
    usability      Float
    features       String[]
    improvements   String           @db.Text
    recommendation Boolean
    comments       String?          @db.Text
    email          String
    status         QueryStatus      @default(NEW)
    response       String?
}


// Support request model
model SupportRequest {
    id          String          @id @default(cuid())
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
    category    SupportCategory
    subject     String
    email       String
    description String          @db.Text
    priority    SupportPriority
    status      QueryStatus     @default(NEW)
    response    String?
}

// Technical issue model
model TechnicalIssue {
    id               String        @id @default(cuid())
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt
    deviceId         String?
    issueType        IssueType
    severity         IssueSeverity
    title            String
    description      String        @db.Text
    stepsToReproduce String        @db.Text
    expectedBehavior String        @db.Text
    email            String
    attachments      String[]
    status           QueryStatus   @default(NEW)
    response         String?
}

model Profile {
    id              String   @id @default(cuid())
    userId          String   @unique
    user            User     @relation(fields: [userId], references: [id])
    bio             String?
    location        String?
    currentLearning String?
    availableFor    String?
    skills          String?
    currentProject  String?
    pronouns        Boolean?
    work            String?
    education       String?
}

model Social {
    id       String  @id @default(cuid())
    userId   String  @unique
    user     User    @relation(fields: [userId], references: [id])
    website  String?
    twitter  String?
    github   String?
    linkedin String?
    facebook String?
}

model Post {
    id          Int      @id @default(autoincrement())
    title       String
    excerpt     String   @db.Text
    content     String   @db.Text
    publishedAt DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Stats
    viewCount    Int @default(0)
    likeCount    Int @default(0)
    commentCount Int @default(0)

    // Keep the original user relation naming
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    // Tags - many-to-many relationship
    tags TagsOnPosts[]

    // Related posts - many-to-many self-relation
    relatedTo   RelatedPosts[] @relation("RelatedFrom")
    relatedFrom RelatedPosts[] @relation("RelatedTo")

    @@index([title])
    @@index([publishedAt])
    @@index([createdById])
}

// Tags implementation
model Tag {
    id    Int           @id @default(autoincrement())
    name  String        @unique
    posts TagsOnPosts[]
}

// Join table for posts and tags
model TagsOnPosts {
    post   Post @relation(fields: [postId], references: [id])
    postId Int
    tag    Tag  @relation(fields: [tagId], references: [id])
    tagId  Int

    @@id([postId, tagId])
}

// Related posts implementation
model RelatedPosts {
    post          Post @relation("RelatedTo", fields: [postId], references: [id])
    postId        Int
    relatedPost   Post @relation("RelatedFrom", fields: [relatedPostId], references: [id])
    relatedPostId Int

    @@id([postId, relatedPostId])
}
